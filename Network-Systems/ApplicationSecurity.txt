# Application Security: Understanding the Fundamentals

## Introduction
Applications are primarily developed with a focus on functionality, often leaving security as an afterthought. The increasing complexity of modern applications can lead to numerous security vulnerabilities.

Note: "Application Software" encompasses both web applications and standalone applications (games, browsers, spreadsheets, word processors, etc.). The majority of cyber attacks target this application layer.

## Real-World Case Study
A company experienced severe financial losses due to a massive data breach:
- Compromised data included: customer names, addresses, birth dates, phone numbers, email addresses, and bank details
- Attack vector: SQL injection through web interface
- Root cause: Injection vulnerability in the application layer
- Important note: Such vulnerabilities exist independently of network and OS security

## Common Security Threats
- SQL Injection attacks
- Cross-site scripting (XSS)
- Buffer overflow exploits
- Cross-site request forgery (CSRF)
- Session hijacking

## Understanding Security Defects
1. Security Flaws (Design Phase)
    - Example: Lack of input validation planning
    
2. Security Bugs (Implementation Phase)
    - Example: Incorrect implementation of input validation

## Achieving Application Security

### Key Security Design Principles
1. Principle of Least Privilege
    - Users should only have necessary privileges
    - Example: Limited database access rights
    
2. Defense in Depth
    - Implementation of multiple security controls
    - Example for SQL injection prevention:
      * Using prepared statements
      * Input validation
      * Proper database permissions

### Secure Coding Practices
Best practices for preventing common vulnerabilities:
- Following OWASP Top 10 guidelines
- Implementing CWE/SANS Top 25 recommendations

#### Example: SQL Query Implementation
Unsafe Code:
